import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

def load_stock_data(file_path):
    df = pd.read_csv(file_path)
    df = df[['Date', 'Close', 'High', 'Low']]
    df['Date'] = pd.to_datetime(df['Date'])
    return df

def preprocess_data(df):
    df['Date_ordinal'] = df['Date'].map(pd.Timestamp.toordinal)
    return df

def train_model(df):
    X = df[['Date_ordinal']]
    y = df['Close']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("\nModel Performance:")
    print(f"Mean Squared Error: {mse}")
    print(f"R^2 Score: {r2}")

    return model, X_test, y_test, y_pred

def plot_predictions(df, X_test, y_test, y_pred):
    plt.figure(figsize=(10, 6))
    plt.plot(df['Date'], df['Close'], label='Actual Prices', color='blue')
    plt.scatter(pd.to_datetime(X_test['Date_ordinal'].map(pd.Timestamp.fromordinal)), y_test, color='red', label='Actual Test Prices')
    plt.scatter(pd.to_datetime(X_test['Date_ordinal'].map(pd.Timestamp.fromordinal)), y_pred, color='green', label='Predicted Test Prices')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.title('Stock Price Prediction')
    plt.legend()
    plt.show()

# Function to update model based on actual value
def update_model_with_feedback(model, X_train, y_train, actual_value, predicted_value, error_correction_factor=0.1):
    error = actual_value - predicted_value
    if abs(error) < error_correction_factor * actual_value:
        reward = 1  # Close enough
    else:
        reward = -1  # Far off

    # Simple adjustment: Re-train with new error-corrected data
    y_train_adjusted = y_train + reward * error_correction_factor
    model.fit(X_train, y_train_adjusted)

    return model

if __name__ == "__main__":
    print("Welcome to the Stock Analysis Program!")

    file_path = input("Enter the file path for the stock data (e.g., data/stock_data.csv): ")

    df = load_stock_data(file_path)

    df = preprocess_data(df)

    model, X_test, y_test, y_pred = train_model(df)

    plot_predictions(df, X_test, y_test, y_pred)

    while True:
        actual_value = float(input("Enter the actual closing price for the last prediction: "))
        predicted_value = y_pred[-1]  # Assuming the last prediction
        model = update_model_with_feedback(model, X_test, y_test, actual_value, predicted_value)

        print("Model updated with feedback. Making new prediction...")
        y_pred = model.predict(X_test)
        plot_predictions(df, X_test, y_test, y_pred)

